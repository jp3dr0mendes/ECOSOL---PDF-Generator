from tkinter import *
from tkinter import ttk
from tkinter import Text
import webbrowser
import base64
from PIL import ImageTk, Image
from docx import Document
from docx.shared import Cm,Pt
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
from docx2pdf import convert
import os
import io
from datetime import date

#class File_Functions(File):
class File():
    def mm2p(mm: int):
        return mm/0.352777
    
    def base64_images_decode(self,image):
        return io.BytesIO(base64.b64decode(image))

    def set_document_margins(self,document):
        sections = document.sections
        for section in sections:
            section.top_margin = Cm(3)
            section.right_margin = Cm(2)
            section.bottom_margin = Cm(2)
            section.left_margin = Cm(3)

    def set_document_font(self,document, font_style:str):
        style = document.styles['Normal']
        font = style.font
        font.name = font_style
        font.size = Pt(12)
    
    def month_name(self, month: int):
        if month == 1:
            return 'Janeiro'
        if month == 2:
            return 'Fevereito'
        if month == 3:
            return 'Mar√ßo'
        if month == 4:
            return 'Abril'
        if month == 5:
            return 'Maio'
        if month == 6:
            return 'Junho'
        if month == 7:
            return 'Julho'
        if month == 8:
            return 'Agosto'
        if month == 9:
            return 'Setembro'
        if month == 10:
            return 'Outubro'
        if month == 11:
            return 'Novembro'
        if month == 12:
            return 'Dezembro'
#Creating a class for documents notations
class Relatorio(File):
    def __init__(self):
        self.document = Document()
        self.project_atributes = {
            'Cliente':None,
            'Usos Finais':None,
            'Trocas':None,
            'Energia Economizada':None,
            'Trocas':None,
            'Demanda na Ponta':None,
            'RCB':None,
            'Lat Local': None,
            'Long Local': None,
            'Numero de Lampadas': None,
        }
        self.project_client = {
            'Nome Cliente': None,
            'Nome Fantasia': None,
            'CNPJ': None,
            'Num Cliente': None,
            'Modalidade da Tarifa': None,
            'Classe/Subclasse': None,
            'Endereco': None,
            'Cidade': None,
            'Estado': None,
            'Telefone': None,
            'E-mail': None,
            'Contato': None,
            'Ramo de Atividade': None, 
            'Descricao':None,
        }
        self.document_images = {
            'Logo': '',
            'Placa de Seguran√ßa':'',
            'Eq de Vida da Lamp':'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',
        }
        # self.cnv = None
        self.date = date.today()
        self.set_document_margins(self.document)
        self.set_document_font(self.document,'Arial')

    def set_paragraphs(self, paragraph:str):
        self.document_paragraphs = {
            'Resumo Executivo':f'''
                O objetivo deste projeto √© promover a eficientiza√ß√£o da ilumina√ß√£o {self.project_atributes['Usos Finais']} do {self.project_atributes['Cliente']} e implementar um sistema de gera√ß√£o de energia fotovoltaica nas instala√ß√µes da unidade.\n\t√â prevista a substitui√ß√£o das l√¢mpadas fluorescentes tubulares e fluorescentes compactas por modelos mais eficientes de LED {self.project_atributes['Trocas']}. Pretende-se tamb√©m realizar a instala√ß√£o de um sistema de gera√ß√£o solar fotovoltaica conectada √† rede. Essas medidas reduzir√£o consideravelmente o consumo de energia el√©trica, e impactar√£o positivamente em todos os meios envolvidos, tanto na redu√ß√£o dos custos para o benefici√°rio, como na redu√ß√£o da demanda no hor√°rio de ponta para concession√°ria.\n\tA fim de maximizar o impacto social e a redu√ß√£o no consumo de energia el√©trica, est√° previsto a organiza√ß√£o de palestras, workshops, distribui√ß√£o de material informativo (folders/cartilhas) e treinamentos, garantindo uma eficaz a√ß√£o educativa, de forma a dar ci√™ncia das a√ß√µes adotadas pela Concession√°ria, da import√¢ncia do projeto de efici√™ncia, e dos benef√≠cios trazidos pelo consumo consciente.\n\tPara a metodologia de Medi√ß√£o e Verifica√ß√£o, ser√£o utilizados os procedimentos do Protocolo Internacional de Medi√ß√£o e Verifica√ß√£o do Desempenho Energ√©tico conforme os procedimentos do Programa de Efici√™ncia Energ√©tica ‚Äì PROPEE e seu guia de M&V.\n\tOs resultados esperados com o projeto s√£o {self.project_atributes['Energia Economizada']} MWh/ano de energia economizada, {self.project_atributes['Demanda na Ponta']}kW de demanda na ponta e uma rela√ß√£o custo-benef√≠cio (RCB) de {self.project_atributes['RCB']}''',
        
        'Apresenta√ß√£o do Cliente':f'''
            {self.project_client['Descricao']}''',
        'Apresenta√ß√£o da Empresa': '''
            A Ecosol √© uma empresa concebida no in√≠cio da d√©cada de 90, idealizada com o objetivo de propagar a cultura de efici√™ncia energ√©tica e energia solar. Localizada em Niter√≥i ‚Äì Rio de Janeiro, a Ecosol vem desde 1993 oferecendo solu√ß√µes em aquecimento solar, instala√ß√µes hidr√°ulicas, el√©tricas e Fotovoltaicas. Nascida na Regi√£o Oce√¢nica como fabricante de Coletores, a Ecosol especializou-se em projetos e instala√ß√µes, participando de grandes obras como o maracan√£, as arenas ol√≠mpicas, ind√∫strias, hospitais, escolas, academias, pr√©dios residenciais e comerciais, al√©m das diversas participa√ß√µes no Programa de Efici√™ncia Energ√©tica da ANEEL, com projetos aprovados em todas as macrorregi√µes do Brasil.\n\tPara o sucesso de seus servi√ßos, a Ecosol conta com um corpo profissional que disponibiliza as seguintes estruturas:\n\t- Equipe de projetos;\n\t- Equipe T√©cnica;\n\t- Equipe de suporte volante;\n\t- Equipe de retaguarda para suporte permanente;\n\t- Manuten√ß√£o e reparo de equipamentos\n\tAtualmente, presente em 18 estados do pa√≠s e com mais de 600 sistemas de energia solar fotovoltaica em opera√ß√£o, a ECOSOL contribui na constru√ß√£o de um futuro mais sustent√°vel para o planeta. Em seu per√≠odo de atua√ß√£o, pode-se comprovar experi√™ncia e credibilidade junto aos grupos de concession√°rias de energia ENEL, Energisa, Equatorial e Neoenergia.''',
        'Vistoria na UC': f'''
            Com o objetivo de identificar as necessidades e a possibilidade de eficientiza√ß√£o da UC, foi realizada, pelo engenheiro eletricista subcontratado Lucas Ara√∫jo Pereira, uma vistoria t√©cnica e o levantamento de dados mostrado na tabela na se√ß√£o ‚Äú5.2. Levantamento‚Äù. Como pode ser observado, a proposta de eficientiza√ß√£o contempla a substitui√ß√£o das l√¢mpadas de tecnologia antiga por novas l√¢mpadas mais eficientes.\n\tCom as coordenadas geogr√°ficas, foi poss√≠vel verificar o potencial de instala√ß√£o do sistema Fotovoltaico. As coordenadas encontradas de -4.9654 W, -42.7958 S , foram ent√£o inseridas no banco de dados do CRESESB, que resultou no gr√°fico abaixo. Os resultados obtidos foram posteriormente avaliados para dimensionamento. Foi considerado o sistema fotovoltaico, pois al√©m da representativa economia de energia, os outros usos fins demonstram-se suficientemente eficientes. Segue, levantamento fotogr√°fico das √°reas comuns do col√©gio, no Anexo A.\n\tA vistoria foi realizada em conjunto com os membros da equipe de manuten√ß√£o do cliente, que visitaram os setores da edifica√ß√£o, com o objetivo de verificar os hor√°rios de funcionamentos das √°reas, assim como os tipos de l√¢mpadas e reatores presentes. Com os dados da vistoria em m√£os, foi poss√≠vel ent√£o realizar o diagn√≥stico energ√©tico levando em considera√ß√£o os c√°lculos preliminares do consumo Energ√©tico Anual, Demanda Retirada na Ponta e RCB para a dada proposta''',
        'Levantamento': 
            [
                f'''\tA tabela a seguir determina o quantitativo de equipamentos presentes por ambiente e o hor√°rio de funcionamento','Como visto no levantamento acima, foram encontrados alguns locais com Ilumina√ß√£o com l√¢mpadas LED. No entanto ainda assim, foram mapeadas 476 l√¢mpadas entre l√¢mpadas florescentes tubulares e compactas, vide levantamento fotogr√°fico realizado no col√©gio, no anexo A deste documento.''',
                f'''\tComo visto no levantamento acima, foram encontrados alguns locais com Ilumina√ß√£o com l√¢mpadas LED. No entanto ainda assim, foram mapeadas {self.project_atributes['Numero de Lampadas']} l√¢mpadas entre l√¢mpadas florescentes tubulares e compactas, vide levantamento fotogr√°fico realizado no col√©gio, no anexo A deste documento.'''
            ],
        'Descri√ß√£o do Sistema Atual': f'''
            Este projeto prev√™ a substitui√ß√£o de todas as l√¢mpadas, sendo elas dos tipos fluorescentes tubulares e compactas, correspondendo a um total de {self.project_atributes['Numero de Lampadas']} l√¢mpadas.''',
        'Descri√ß√£o do Sistema':
        [
            'Proposto Ilumina√ß√£o:',
            'As l√¢mpadas ser√£o substitu√≠das de acordo com a tabela a seguinte:',
            '\tA partir dos principais hor√°rios de funcionamento, custos e caracter√≠sticas el√©tricas dos equipamentos, foi feita a an√°lise preliminar dos resultados esperados para a Demanda Retirada na Ponta, Energia Anual Economizada e RCB do sistema de ilumina√ß√£o, como pode ser observado nas Tabelas abaixo:',
            'Fotovoltaico:',
            '\tO sistema ter√° pot√™ncia de 33,5 kWp em 62 m√≥dulos, e 1 inversor com pot√™ncia nominal de 25 kW, e ser√° instalado em estruturas fixadas no telhado.\n\tNa imagem e tabela abaixo, mostramos mais detalhes do sistema:'
        ],
        'Cronograma Implanta√ß√£o':
        [
            'Os servi√ßos que ser√£o realizados s√£o divididos em dois usos finais:',
            'Ilumina√ß√£o:',
            '\tAs l√¢mpadas e os respectivos reatores ser√£o retirados, devidamente descartados e substitu√≠das por l√¢mpadas de tecnologia LED, que n√£o precisam de reatores.\n\tAo final da substitui√ß√£o, ser√° realizado relat√≥rio de medi√ß√£o e verifica√ß√£o, seguindo as orienta√ß√µes do PIMVP (EVO,2012) e PROPEE (ANEEL,2013).',
            'Fotovoltaico:',
            '\tSer√° instalado um sistema fotovoltaico, com estruturas de fixa√ß√£o (trilhos) no telhado da unidade consumidora. A fixa√ß√£o dos trilhos se dar√° sobre o madeiramento do telhado atrav√©s de parafuso estrutural. A gera√ß√£o de energia servir√° para abastecer a demanda de energia da unidade contemplada no projeto.\n\tO servi√ßo come√ßar√° a ser realizado pela fixa√ß√£o e montagem das estruturas, para posterior fixa√ß√£o dos m√≥dulos fotovoltaicos. Ap√≥s essa fase, ser√£o feitas todas as instala√ß√µes el√©tricas e comissionamento da usina. Com a homologa√ß√£o pela concession√°ria, daremos in√≠cio a fase de medi√ß√£o, que ser√° feita seguindo as orienta√ß√µes PIMVP (EVO,2012) e PROPEE (ANEEL,2013).\n\tSer√£o emitidos relat√≥rios regulares e um relat√≥rio final de todos os servi√ßos realizados.\n\tA Tabela registrada abaixo organiza a descri√ß√£o cronol√≥gica dos servi√ßos a serem realizados durante toda a execu√ß√£o do projeto.'
        ],
        'Especifica√ß√µes dos Materiais e Equipamentos':
        [
            '\tTodas as l√¢mpadas substitu√≠das s√£o de tecnologia LED e tem as seguintes caracter√≠sticas:',
            'C√°lculo da vida √∫til de l√¢mpadas:',
            '(*) Vida √∫til da l√¢mpada, em horas, fornecida pelo fabricante, em cat√°logo, vide anexo.',
            'Sistema fotovoltaico',
            '\tA instala√ß√£o do sistema solar contar√° com 62 placas fotovoltaicas de 540 Wp, somando um total de 33,5 kWp de pot√™ncia instalada conectada √† rede. Considerando o HSP do local e o rendimento simulado por software de 0,70, a fim de cobrir as perdas por inefici√™ncia dos equipamentos, calor, sombreamento etc., estima-se uma gera√ß√£o de aproximadamente 47,27 MWh de energia anual. A tabela abaixo lista a rela√ß√£o b√°sica dos principais componentes a serem utilizados na implementa√ß√£o do sistema. Tabela 10:',
            '\tOs m√≥dulos solares fotovoltaicos utilizados ser√£o do modelo JAM72D30-540/Mb, da fabricante JA, o modelo consta na lista dos M√≥dulos Fotovoltaicos certificados pelo PROCEL, vide anexo C, e possui as seguintes especifica√ß√µes t√©cnicas:',
            'Dentre outras certifica√ß√µes e garantias, o produto oferece:',
            '-Produto avaliado pelo INMETRO com efici√™ncia energ√©tica A, em conformidade com o Programa Brasileiro de Etiquetagem.\n-Garantia de produ√ß√£o Linear de 25 anos\n-Garantia contra defeito de fabrica√ß√£o de 10 anos',
            '\tFoi selecionado para a proposta o inversor da marca Sungrow, modelo SG12KTL-M. Abaixo, encontram-se as especifica√ß√µes t√©cnicas do mesmo:',
            '\tA string box escolhida para o or√ßamento deste diagn√≥stico, √© STRING BOX CLAMPER SOLAR SB600 1-2E/2S.',
            '\tA estrutura √© projetada para ser aparafusada no caibro do telhado. Este parafuso ir√° sustentar os trilhos que, por sua vez, sustentar√£o os pain√©is.',
            'Caracter√≠sticas:',
            '-F√°cil instala√ß√£o;\n-Alt√≠ssima vida √∫til;\n-Galvanizada a Fogo conforme Norma NBR 6323;\n-Projetada para suportar cargas aerodin√¢micas conforme Norma ABNT NBR 6123.',
            'Os cabos e conectores a serem utilizados ser√£o de acordo com o listado abaixo:\n\n-Cabo Solar 6mm at√© 1800 V CC Preto ABNT NBR 16612\n-Cabo Solar 6mm at√© 1800 V CC Vermelho ABNT NBR 16612\n-Conectores F√™mea/ Macho (WEID CABUR TE MC4 ou compat√≠vel)',
            '\tObedecendo as normas t√©cnicas VR01.01-00.12‚Äì Norma de Conex√£o de Microgeradores ao Sistema de Distribui√ß√£o em baixa tens√£o, ser√° instalado uma placa de sinaliza√ß√£o (250mm x 180mm) no padr√£o de entrada de energia, informando que a unidade consumidora possui gera√ß√£o pr√≥pria conforme modelo abaixo:',
            '\tA vida √∫til dos equipamentos fotovoltaicos est√° representada na tabela a seguir, de acordo com o edital, Anexo C ‚Äì Tabela de Materiais e Equipamentos:',
        ],
        'Simula√ß√£o de Energia':
        [
            '\tO arquivo do software PVsyst com a simula√ß√£o de gera√ß√£o de energia encontra-se no anexo D, ao final do projeto.',
            '\tO laudo estrutural, que atesta a viabilidade de instala√ß√£o do sistema fotovoltaico na unidade consumidora, √© apresentado no Anexo E, ao final deste documento.\n\tO telhado conta com estrutura met√°lica, e est√° prevista a instala√ß√£o de 62 m√≥dulos de energia solar com dimens√µes de (2285x1134x35) mm, pesando 31,60 kg cada um que, em conjunto com suas estruturas auxiliares, gerar√° um carregamento adicional em torno de 14 kgf/m¬≤. A carga est√°tica do vento √© de 70kgf/m¬≤ e o peso das telhas √© de 20kgf/m¬≤, gerando um carregamento total de 1,04kN/m. Nesta an√°lise foi considerada a dist√¢ncia entre dois pontos de apoio dos trilhos de 1,5 m.\n\t√Årea total da instala√ß√£o: 150 m¬≤ \n\tPeso total na estrutura: 2.100\n\tAs demais informa√ß√µes, bem como considera√ß√µes e Conclus√£o do Laudo, encontram-se no Anexo E deste relat√≥rio.\n\tO profissional respons√°vel pelo Laudo estrutural √© o Engenheiro Civil Lucas Ara√∫jo Pereira, CREA RJ: 2017113375.'
        ],
        'Gerenciamento da Obra':'\tPara este projeto, as fun√ß√µes de supervis√£o ficar√£o a cargo do engenheiro Alexandre Goulart Galv√£o, que possui experi√™ncia em projetos de efici√™ncia energ√©tica junto a concession√°rias e tamb√©m possui larga experi√™ncia com dimensionamento, instala√ß√£o e comissionamento de sistemas fotovoltaicos.',
        'Analise do Consumo de Energia':
        [
            '\tO gr√°fico a seguir expressa, aproximadamente, a participa√ß√£o mensal do uso fim de energia da unidade. Como pode ser observado, a ilumina√ß√£o representa aproximadamente 73% do consumo total dos estabelecimentos.',
            '\tO tempo de funcionamento das atividades √© de no m√°ximo 9h/dia em ambientes internos e 12 h/dia em ambientes externos, que abrange tanto os hor√°rios de ponta, como Fora Ponta. A ilumina√ß√£o externa funciona apenas pelo per√≠odo da noite abrangendo 3h da ponta.\n\tA m√©dia de consumo total, considerando a unidade consumidora, √© de 113.063,62 kWh de energia mensal. No gr√°fico abaixo √© poss√≠vel observar o padr√£o aproximado de consumo mensal do estabelecimento ao longo do ano.\n\tAssim, a proposta de retrofit das l√¢mpadas exercer√° impacto na redu√ß√£o do consumo tanto no hor√°rio de ponta, como no hor√°rio fora de ponta. J√° a instala√ß√£o do gerador solar Fotovoltaico impactar√° no consumo apenas no hor√°rio fora de ponta.'
        ],
        }
        
        return self.document_paragraphs[paragraph]

    def create_file(self):
        self.set_file()

        self.document.save(self.name+'.docx')
        convert(self.name+'.docx',self.name+'.pdf')
        os.remove(self.name+'.docx')
        
        webbrowser.open(self.name+'.pdf')

    def set_file(self):
        self.first_page()
        self.resumo_executivo()
        self.dados()
        self.client_description()
        self.apresenta√ß√£o_empresa()       
        self.vistoria_uc()
        self.levantamento()
        self.desc_sist_atual()
        self.desc_sist()
        self.cronograma_imp()
        self.especific_mat_equip()
        self.simulacao_geracao_energia()
        self.gerenciamento_obra()
        self.analise_consumo_energia()

    def first_page(self):
        self.document.add_picture(self.base64_images_decode(self.document_images['Logo']))
        self.last_paragrph = self.document.paragraphs[-1]
        self.last_paragrph.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        for i in range(21):
            if i == 8:
                paragraph = self.document.add_paragraph().add_run('Diagn√≥stico Energ√©tico')
                paragraph.font.size = Pt(30)
                paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
            elif i == 9:
                cliente = self.project_atributes['Cliente']
                paragraph = self.document.add_paragraph().add_run(f'Projeto de Eficientiza√ß√£o do {cliente}')
                paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
                paragraph.font.size = Pt(15)
                paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
            elif i == 20:
                paragraph = self.document.add_paragraph(f'{self.month_name(self.date.month)} de {self.date.year}')
                paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
            else:                           
                paragraph = self.document.add_paragraph('')
        # self.document.add_page_break()
    def resumo_executivo(self):
        self.document.add_heading('1. Resumo Executivo')
        # self.document.breaks()
        self.project_atributes
        print(self.project_atributes)
        print(self.set_paragraphs('Resumo Executivo'))
        paragraph = self.document.add_paragraph(self.set_paragraphs('Resumo Executivo'))
        paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY
    
    def dados(self):
        self.document.add_heading('2. Dados',1)
        self.document.add_heading('2.1. Empresa Executora',2)
        cliente = self.project_atributes['Cliente']
        self.ecosol_table = (
            ('T√≠tulo do Projeto', f'Projeto de Eficientiza√ß√£o do {cliente}'),
            ('Empresa', 'Ecosol Gera√ß√£o'),
            ('Raz√£o Social','ECOSOL ENERGIA SOLAR E TECNOLOGIA LTDA.'),
            ('Endere√ßo','Av. Irene Lopes Sodr√© N¬∫ 477, Itaipu, Niter√≥i ‚Äì Rio de Janeiro'),
            ('Respons√°vel T√©cnico', 'Alexandre Goulart Galv√£o'),
            ('T√≠tulo do Respons√°vel','Engenheiro Mec√¢nico'),
            ('CREA','88102835-6'),
            ('Telefone','(21) 2609-5007 / (21) 97041-7997'),
            ('E-mail','engenharia@ecosolenergiasolar.com.br'),
            ('Site','www.ecosolgeracao.com.br')
        )

        table = self.document.add_table(0,2,'Table Grid')

        for data,info in self.ecosol_table:
            row = table.add_row().cells
            row[0].text = data
            row[1].text = info

        self.document.add_heading('2.2. Cliente Beneficiado',2)
        self.table_clients()
    def apresenta√ß√£o_empresa(self):
        self.document.add_heading('4. Apresenta√ß√£o da Empresa Executora',1)
        self.document.add_paragraph(self.set_paragraphs('Apresenta√ß√£o da Empresa'))
    #Function to make a client data table
    def table_clients(self):
        self.client_data = (
            ('Cliente',self.project_client['Nome Cliente']),
            ('Nome Fantasia',self.project_client['Nome Fantasia']),
            ('CNPJ',self.project_client['CNPJ']),
            ('N¬∞s do Cliente',self.project_client['Num Cliente']),
            ('Modalidade da Tarifa',self.project_client['Modalidade da Tarifa']),
            ('Classe/Subclasse',self.project_client['Classe/Subclasse']),
            ('Endere√ßo',self.project_client['Endereco']),
            ('Cidade',self.project_client['Cidade']),
            ('Estado',self.project_client['Estado']),
            ('Telefone',self.project_client['Telefone']),
            ('E-mail',self.project_client['E-mail']),
            ('Contato',self.project_client['Contato']),
            ('Ramo da Atividade',self.project_client['Ramo de Atividade'])
        )

        table = self.document.add_table(0,2,'Table Grid')

        for data,info in self.client_data:
            row = table.add_row().cells
            row[0].text = data
            row[1].text = info
        print('Tabela de clientes criada')
        print(type(table))

    #inserting a user description client
    def client_description(self):
        self.document.add_heading('3. Aprensenta√ß√£o do Cliente',1)
        self.document.add_paragraph(self.set_paragraphs('Apresenta√ß√£o do Cliente'))

    def descricao_detalhamento_projeto(self):
        self.vistoria_uc()
        self.levantamento()
        self.desc_sist_atual()
        self.desc_sist()
        self.cronograma_imp()
        self.especific_mat_equip()
        self.simulacao_geracao_energia()
        self.gerenciamento_obra()
        self.analise_consumo_energia()

    def vistoria_uc(self):
        self.document.add_heading('5. Descri√ß√£o e detalhamento do projeto',1)
        self.document.add_heading('5.1. Vistoria na Unidade Consumidora e Avalia√ß√£o',2)

        self.document.add_paragraph(self.set_paragraphs('Vistoria na UC'))
    
    def levantamento(self):
        lev = self.set_paragraphs('Levantamento')
        self.document.add_heading('5.2. Levantamento',2)
        self.document.add_paragraph(lev[0])
        self.document.add_paragraph(lev[1])
        #tabela de equipamentos da se√ß√£o 5.2
    def desc_sist_atual(self):
        self.document.add_heading('5.3. Descri√ß√£o do Sistema Atual',2)
        self.document.add_paragraph(self.set_paragraphs('Descri√ß√£o do Sistema Atual'))
    def desc_sist(self):
        desc_sist = self.set_paragraphs('Descri√ß√£o do Sistema')
        
        self.document.add_heading('5.4. Descri√ß√£o do Sistema',2)
        self.document.add_paragraph('')
        
        aux=self.document.add_paragraph()
        aux_bold = aux.add_run(desc_sist[0])
        aux_bold.bold=True
        
        self.document.add_paragraph(desc_sist[1])
        
        #adicionar tabela de substitui√ß√£o de ilumina√ß√£o
        
        self.document.add_paragraph(desc_sist[2])
        
        aux=self.document.add_paragraph()
        aux_bold = aux.add_run(desc_sist[3])
        aux_bold.bold=True
        
        self.document.add_paragraph(desc_sist[4])
    
    def cronograma_imp(self):
        text = self.set_paragraphs('Cronograma Implanta√ß√£o')
        self.document.add_paragraph(text[0])
        
        aux=self.document.add_paragraph()
        aux_bold=aux.add_run(text[1])
        aux_bold.bold=True

        self.document.add_paragraph(text[2])

        aux=self.document.add_paragraph()
        aux_bold=aux.add_run(text[3])
        aux_bold.bold=True

        self.document.add_paragraph(text[4])

    def especific_mat_equip(self):
        text = self.set_paragraphs('Especifica√ß√µes dos Materiais e Equipamentos')

        self.document.add_heading('5.6. Especifica√ß√µes dos Materiais e Equipamentos',2)
        self.document.add_heading('5.6.1. Ilumina√ß√£o',3)
        self.document.add_paragraph(text[0])

        paragraph = self.document.add_paragraph()
        paragraph_form = paragraph.add_run(text[1])
        paragraph_form.bold = True
        paragraph_form.underline = True

        self.document.add_picture(self.base64_images_decode(self.document_images['Eq de Vida da Lamp']))
        self.last_paragrph = self.document.paragraphs[-1]
        self.last_paragrph.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

        self.document.add_paragraph(text[2])

        paragraph = self.document.add_paragraph()
        paragraph_form = paragraph.add_run(text[3])
        paragraph_form.bold = True

        self.document.add_paragraph(text[4])

        self.document.add_heading('5.6.1.1. M√≥dulos',4)
        self.document.add_paragraph(text[5])

        paragraph = self.document.add_paragraph()
        paragraph_form = paragraph.add_run(text[6])
        paragraph_form.bold = True

        self.document.add_paragraph(text[7])
        self.document.add_paragraph(text[8])

        self.document.add_heading('5.6.1.2. Inversor',4)
        self.document.add_paragraph(text[9])

        self.document.add_heading('5.6.1.3. String Box',4)
        self.document.add_paragraph(text[10])

        self.document.add_heading('5.6.1.4. Estruturas de Fixa√ß√£o',4)        

        paragraph = self.document.add_paragraph()
        paragraph_form = paragraph.add_run(text[11])
        paragraph_form.bold = True
        paragraph_form.underline = True

        self.document.add_paragraph(text[12])

        self.document.add_heading('5.6.1.5. Cabos e Conectores',4)
        self.document.add_paragraph(text[13])

        self.document.add_heading('5.6.1.6. Placa de Sinaliza√ß√£o',4)
        self.document.add_paragraph(text[14])        

        self.document.add_picture(self.base64_images_decode(self.document_images['Placa de Seguran√ßa']))
        self.last_paragrph = self.document.paragraphs[-1]
        self.last_paragrph.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

        self.document.add_paragraph(text[15])

    def simulacao_geracao_energia(self):
        self.document.add_heading('6. Simula√ß√£o de gera√ß√£o de energia',1)
        text = self.set_paragraphs('Simula√ß√£o de Energia')
        self.document.add_paragraph(text[0])
        
        self.document.add_heading('6.1. Laudo estrutural',2)
        self.document.add_paragraph(text[1])

    def gerenciamento_obra(self):
        self.document.add_heading('7. Gerenciamento da Obra',1)
        self.document.add_paragraph(self.set_paragraphs('Gerenciamento da Obra'))

    def analise_consumo_energia(self):
        text = self.set_paragraphs('Analise do Consumo de Energia')
        self.document.add_heading('8. A√°lise do Consumo de Energia',1)
        self.document.add_heading('8.1. Estimativa da Participa√ß√£o dos Usos Finais da Energia El√©trica')
        self.document.add_paragraph(text[0])
        self.document.add_heading('8.2. Avalia√ß√£o do Hist√≥rico de Consumo',1)
        self.document.add_paragraph(text[1])

#Creating a main application functions
class Application_Functions():
    def base64_images(self):
        self.ecosol_logo= ""
    def file_generate(self):
        self.gets_entry_values()
        self.pdf.create_file()

    def gets_radiobutton_values(self):
        aux = self.troca_aparelhos_var.get()
        if aux == 1:
            return ''
        if aux == 2:
            return 'e troca de aparelhos de ar condicionados n√£o eficientes por modelos com selo PROCEL'
        if aux == 3:
            return 'e troca de aparelhos de refrigera√ß√£o n√£o eficientes por modelos com selo PROCEL'

    def gets_entry_values(self):
        self.pdf.name= self.document_name_entry.get()
        # self.pdf.client = self.document_client_entry.get()
        self.pdf.project_atributes['Cliente'] = self.client_name_entry.get()
        self.pdf.project_client['Nome Cliente'] = self.client_name_entry.get()
        self.pdf.project_client['Nome Fantasia'] = self.client_name_f_entry.get()
        self.pdf.project_client['CNPJ'] = self.client_cnpj_entry.get()
        self.pdf.project_client['Num Cliente'] = self.client_num_entry.get()
        self.pdf.project_client['Modalidade da Tarifa'] = self.client_mod_entry.get()
        self.pdf.project_client['Classe/Subclasse'] = self.client_class_entry.get()
        self.pdf.project_client['Endereco'] = self.client_address_entry.get()
        self.pdf.project_client['Cidade'] = self.client_city_entry.get()
        self.pdf.project_client['Estado'] = self.client_state_entry.get()
        self.pdf.project_client['Telefone'] = self.client_phone_entry.get()
        self.pdf.project_client['E-mail'] = self.client_mail_entry.get()
        self.pdf.project_client['Contato'] = self.client_contact_entry.get()
        self.pdf.project_client['Ramo de Atividade'] = self.client_activity_entry.get()
        self.pdf.project_atributes['Usos Finais'] = self.final_use_entry.get()
        self.pdf.project_atributes['Energia Economizada'] = self.energy_economy_entry.get()
        self.pdf.project_atributes['Demanda na Ponta'] = self.demanda_entry.get()
        self.pdf.project_atributes['RCB'] = self.rcb_entry.get()
        self.pdf.project_atributes['Numero de Lampadas'] = self.num_lamp_entry.get()
        self.pdf.project_client['Descricao'] = self.client_description_entry.get(1.0,'end')
        self.pdf.project_atributes['Numero de Lampadas'] = self.num_lamp_entry.get()

        self.pdf.project_atributes['Trocas'] = self.gets_radiobutton_values()
        
        print(self.pdf.project_atributes['Trocas'])
        print(self.pdf.name)
        print(self.pdf.project_atributes['Cliente'])

#building the application
class Application(Application_Functions):
    def __init__(self):
        self.root=Tk()
        self.pdf = Relatorio()
        self.base64_images()
        self.screen()
        self.window_buttons()
        self.frame_logo()
        self.main_frame()
        self.pages()
        self.widgets_page1()
        self.widgets_page2()
        self.widgets_page3()
        self.labels_frame_logo()
        self.root.mainloop()

    def screen(self):
        self.root.title('ECOSOL - PDF AUTO GENERATE')
        self.root.geometry("1000x700")
        self.root.resizable(True,True)
        #self.root.maxsize(width=,height)
        #self.root.minsize(width=,height=)
    #set first frame definitions
    def frame_logo(self):
        self.fr_logo=Frame(self.root,bd=4,)
        self.fr_logo.place(relx=0.3,rely=0.01,relwidth=0.4,relheight=0.2)
    #setting main frame definitions
    def main_frame(self):
        self.main_fr=Frame(self.root,bd=4,highlightbackground='black',highlightthickness=0.5)
        self.main_fr.place(relx=0.01,rely=0.2,relwidth=0.98,relheight=0.725)
    #setting notebook in main frame
    def pages(self):
        self.notebook = ttk.Notebook(self.main_fr)
        self.page1 = Frame(self.notebook)
        self.page2 = Frame(self.notebook)
        self.page3 = Frame(self.notebook)

        self.page1.configure(background='lightgray')
        self.page2.configure(background='lightgray')
        self.page3.configure(background = 'lightgray')

        self.notebook.add(self.page1,text='Document Settings')
        self.notebook.add(self.page2, text='Client Information')
        self.notebook.add(self.page3, text = 'Resumo do Projeto')

        self.notebook.place(relx=0,rely=0,relwidth=1,relheight=1)
    #setting logo
    def labels_frame_logo(self):
        self.ecosol_img = PhotoImage(data=base64.b64decode(self.ecosol_logo))
        self.ecosol_img.subsample(2,2)
        self.ecosol_label_img = Label(self.fr_logo, image=self.ecosol_img)
        self.ecosol_label_img.place(relx=0.0,rely=0.0,relheight=1,relwidth=1)
    def widgets_page1(self):
        #creating page1 labels
        self.document_name_label = Label(self.page1,text="Document Name:",bg = 'lightgray',)
        self.document_client_label = Label(self.page1,text="Client Name:",bg = "lightgray")
        
        #locating page1 labels
        self.document_name_label.place(relx=0,rely=0,relwidth=0.12,relheight=0.1)
        self.document_client_label.place(relx=0,rely=0.11,relwidth=0.1,relheight=0.1)
        
        #creating page1 entrys
        self.document_name_entry = Entry(self.page1)
        self.document_name_entry.place(relx=0.01,rely=0.071,relwidth=0.15,relheight=0.06)
        
        self.document_client_entry = Entry(self.page1)
        self.document_client_entry.place(relx=0.01,rely=0.181,relwidth=0.15,relheight=0.06)

    def widgets_page2(self):
        self.client_name_label = Label(self.page2,text='Nome do Cliente',bg='lightgray')
        self.client_name_label.place(relx=0.01,rely=0.0,relwidth=0.10,relheight=0.1)

        self.client_name_entry = Entry(self.page2)
        self.client_name_entry.place(relx=0.01,rely=0.08,relwidth=0.15,relheight=0.06)

        self.client_name_f_label = Label(self.page2,text='Nome Fantasia',bg='lightgray')
        self.client_name_f_label.place(relx=0.23,rely=0.0,relwidth=0.15,relheight=0.1)

        self.client_name_f_entry = Entry(self.page2)
        self.client_name_f_entry.place(relx=0.25,rely=0.08,relwidth=0.15,relheight=0.06)
        
        self.client_cnpj_label = Label(self.page2,text='CNPJ',bg='lightgray')
        self.client_cnpj_label.place(relx=0.45,rely=0.0,relwidth=0.1,relheight=0.1)

        self.client_cnpj_entry = Entry(self.page2)
        self.client_cnpj_entry.place(relx=0.48,rely=0.08,relwidth=0.15,relheight=0.06)
        
        self.client_num_label = Label(self.page2,text='N¬∞s do Cliente',bg='lightgray')
        self.client_num_label.place(relx=0.7,rely=0.0,relwidth=0.15,relheight=0.1)

        self.client_num_entry = Entry(self.page2)
        self.client_num_entry.place(relx=0.73,rely=0.08,relwidth=0.15,relheight=0.06)

        self.client_mod_label = Label(self.page2,text='Modalidade Tarif√°ria',bg='lightgray')
        self.client_mod_label.place(relx=0.015,rely=0.15,relwidth=0.115,relheight=0.1)

        self.client_mod_entry = Entry(self.page2)
        self.client_mod_entry.place(relx=0.01,rely=0.23,relwidth=0.15,relheight=0.06)
        
        self.client_class_label = Label(self.page2,text='Classe/Subclasse',bg='lightgray')
        self.client_class_label.place(relx=0.25,rely=0.15,relwidth=0.11,relheight=0.1)

        self.client_class_entry = Entry(self.page2)
        self.client_class_entry.place(relx=0.25,rely=0.23,relwidth=0.15,relheight=0.06)

        self.client_address_label = Label(self.page2,text='Endedre√ßo',bg='lightgray')
        self.client_address_label.place(relx=0.463,rely=0.15,relwidth=0.11,relheight=0.1)

        self.client_address_entry = Entry(self.page2)
        self.client_address_entry.place(relx=0.48,rely=0.23,relwidth=0.15,relheight=0.06)

        self.client_city_label = Label(self.page2,text='Cidade',bg='lightgray')
        self.client_city_label.place(relx=0.705,rely=0.15,relwidth=0.11,relheight=0.1)

        self.client_city_entry = Entry(self.page2)
        self.client_city_entry.place(relx=0.73,rely=0.23,relwidth=0.15,relheight=0.06)

        self.client_state_label = Label(self.page2,text='Estado',bg='lightgray')
        self.client_state_label.place(relx=0,rely=0.3,relwidth=0.08,relheight=0.1)

        self.client_state_entry = Entry(self.page2)
        self.client_state_entry.place(relx=0.015,rely=0.38,relwidth=0.15,relheight=0.06)

        self.client_phone_label = Label(self.page2,text='Telefone',bg='lightgray')
        self.client_phone_label.place(relx=0.22,rely=0.3,relwidth=0.12,relheight=0.1)

        self.client_phone_entry = Entry(self.page2)
        self.client_phone_entry.place(relx=0.25,rely=0.38,relwidth=0.15,relheight=0.06)

        self.client_mail_label = Label(self.page2,text='E-mail',bg='lightgray')
        self.client_mail_label.place(relx=0.47,rely=0.3,relwidth=0.08,relheight=0.1)

        self.client_mail_entry = Entry(self.page2)
        self.client_mail_entry.place(relx=0.48,rely=0.38,relwidth=0.15,relheight=0.06)

        self.client_contact_label = Label(self.page2,text='Contato',bg='lightgray')
        self.client_contact_label.place(relx=0.72,rely=0.3,relwidth=0.08,relheight=0.1)

        self.client_contact_entry = Entry(self.page2)
        self.client_contact_entry.place(relx=0.73,rely=0.38,relwidth=0.15,relheight=0.06)

        self.client_activity_label = Label(self.page2,text='Ramo de Atividade',bg='lightgray')
        self.client_activity_label.place(relx=0.01,rely=0.475,relwidth=0.13,relheight=0.1)

        self.client_activity_entry = Entry(self.page2)
        self.client_activity_entry.place(relx=0.015,rely=0.57,relwidth=0.15,relheight=0.06)

    def widgets_page3(self):
        self.final_use_label = Label(self.page3,text='Usos Finais do Projeto:', bg='lightgray')
        self.final_use_label.place(relx=0.01,rely=0.0,relwidth=0.125,relheight=0.1)

        # self.final_use_entry = Text(self.page3,height=10,width=80)
        # self.final_use_entry.place(relx=0.01,rely=0.08)

        self.final_use_entry = Entry(self.page3)
        self.final_use_entry.place(relx=0.01,rely=0.08,relwidth=0.172,relheight=0.06)

        self.energy_economy_label = Label(self.page3,text='Energia Economizada (em MWh/ano)',bg='lightgray')
        self.energy_economy_label.place(relx=0.23,rely=0.0,relwidth=0.205,relheight=0.1)

        self.energy_economy_entry = Entry(self.page3)
        self.energy_economy_entry.place(relx=0.23,rely=0.08,relwidth=0.205,relheight=0.06)

        self.demanda_label = Label(self.page3,text='Demanda na Ponta (em kW)',bg='lightgray')
        self.demanda_label.place(relx=0.5,rely=0.0,relwidth=0.16,relheight=0.1)

        self.demanda_entry = Entry(self.page3)
        self.demanda_entry.place(relx=0.5,rely=0.08,relwidth=0.16,relheight=0.06)

        self.troca_aparelhos_label = Label(self.page3,text='Haver√° troca de aparelhos?', bg='lightgray')
        self.troca_aparelhos_label.place(relx=0.72,rely=0.0,relwidth=0.15,relheight=0.1)

        self.rcb_label = Label(self.page3,text = 'Rela√ß√£o Custo-Benef√≠cio (RCB):',bg='lightgray')
        self.rcb_label.place(relx=0.01,rely=0.145,relwidth=0.17,relheight=0.1)

        self.rcb_entry = Entry(self.page3)
        self.rcb_entry.place(relx=0.01,rely=0.23,relwidth=0.172,relheight=0.06)

        self.num_lamp_label = Label(self.page3,text='N√∫mero de L√¢mpadas:',bg='lightgray')
        self.num_lamp_label.place(relx=0.23,rely=0.145,relwidth=0.13,relheight=0.1)

        self.num_lamp_entry = Entry(self.page3)
        self.num_lamp_entry.place(relx=0.23,rely=0.23,relwidth=0.205,relheight=0.06)

        #making a radio button to select the options to "troca de aparelhos"
        self.troca_aparelhos_var = IntVar()
        
        self.op1 = Radiobutton(self.page3,text='Sem troca de aparelhos',variable=self.troca_aparelhos_var,value=1,bg='lightgray')
        self.op1.place(relx=0.72,rely=0.07,relwidth=0.15,relheight=0.1)
        
        self.op2 = Radiobutton(self.page3,text='troca de aparelhos de ar condicionados',variable=self.troca_aparelhos_var,value=2,bg='lightgray')
        self.op2.place(relx=0.725,rely=0.14,relwidth=0.23,relheight=0.1)

        self.op3 = Radiobutton(self.page3,text='troca de aparelhos de refrigera√ß√£o',variable=self.troca_aparelhos_var,value=3,bg='lightgray')
        self.op3.place(relx=0.711,rely=0.21,relwidth=0.23,relheight=0.1)

        #making a place to write a resumn of the client
        self.client_description_label = Label(self.page3,text='Descri√ß√£o do Cliente:',bg='lightgray')
        self.client_description_label.place(relx=0.01,rely=0.315,relwidth=0.13,relheight=0.06)

        # self.client_description_entry = Text(self.page3,height=200,width=400)
        self.client_description_entry = Text(self.page3)
        self.client_description_entry.place(relx=0.01,rely=0.4,relwidth=0.98,relheight=0.35)

        #adding a scrollbar to the client description entry
        self.client_description_scrollbar = Scrollbar(self.client_description_entry)
        self.client_description_scrollbar.pack(side=RIGHT,fill=BOTH)
        self.client_description_entry.config(yscrollcommand = self.client_description_scrollbar.set)
        self.client_description_scrollbar.config(command = self.client_description_entry.yview)

    def window_buttons(self):
        self.generate_pdf_button = Button(self.root,text = "Gerar PDF",command = self.file_generate)
        self.generate_pdf_button.place(relx=0.45,rely=0.94,relwidth=0.1,relheight=0.04)

        self.quit_application_button = Button(self.root,text='Quit',command = self.root.destroy)
        self.quit_application_button.place(relx=0.85,rely=0.94,relwidth=0.1,relheight=0.04) 

Application()